{"version":3,"sources":["hooks/useResizeObserver.js","components/Timeseries.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","React","memo","timeseries","dates","chartType","isUniform","isLog","t","useTranslation","refs","useRef","wrapperRef","highlightedDate","setHighlightedDate","length","T","getBoundingClientRect","width","height","margin","chartRight","chartBottom","xScale","scaleTime","clamp","domain","parseIndiaDate","range","numTicksX","xAxis","g","attr","call","axisBottom","ticks","tickFormat","date","formatDate","xAxis2","yScale","tickValues","tickSize","select","style","yAxis","axisRight","tickPadding","uniformScaleMin","min","getStatistic","uniformScaleMax","max","Math","yScaleUniformLinear","scaleLinear","nice","yScaleUniformLog","scaleLog","mousemove","xm","mouse","this","invert","isNaN","bisectDate","bisector","left","dateLeft","dateRight","mouseout","i","svg","transition","duration","D3_TRANSITION_DURATION","statistic","TIMESERIES_STATISTICS","generateYScale","color","COLORS","selectAll","data","join","enter","append","remove","pathLength","linePath","line","curve","curveMonotoneX","x","y","getTotalLength","update","attrTween","previous","interpolatePath","on","getStatisticDelta","useCallback","deltaToday","yesterday","formatISO","subDays","representation","trail","useMemo","styles","map","element","push","animationDelay","Fragment","className","delta","key","classnames","capitalize","formatNumber","preserveAspectRatio","prevProps","currProps","equal","regionHighlighted","stateCode","districtName"],"mappings":"6KAGaA,EAAoB,SAACC,GAAS,IAAD,EACJC,mBAAS,MADL,mBACjCC,EADiC,KACrBC,EADqB,KAcxC,OAZAC,qBAAU,WACR,IAAMC,EAAgBL,EAAIM,QACpBC,EAAiB,IAAIC,KAAe,SAACC,EAASC,GAClDD,EAAQE,SAAQ,SAACC,EAAOC,GACtBV,EAAcS,EAAME,mBAIxB,OADAP,EAAeQ,QAAQV,GAChB,WACLE,EAAeS,UAAUX,MAE1B,CAACL,IACGE,I,6QC2bMe,cAAMC,MAhbrB,YAAuE,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,MACrDC,EAAKC,cAALD,EACDE,EAAOC,iBAAO,IAEdC,EAAaD,mBACbzB,EAAaH,YAAkB6B,GAL+B,EAOtB3B,qBAPsB,mBAO7D4B,EAP6D,KAO5CC,EAP4C,KASpE1B,qBAAU,WACR0B,EAAmBV,EAAMA,EAAMW,OAAS,MACvC,CAACX,IAEJhB,qBAAU,WACR,IAAM4B,EAAIZ,EAAMW,OADF,EAIZ7B,GAAc0B,EAAWtB,QAAQ2B,wBAD5BC,EAHO,EAGPA,MAAOC,EAHA,EAGAA,OAIRC,EAAe,GAAfA,EAAgD,GAChDC,EAAaH,EADa,GAE1BI,EAAcH,EAFwB,GAOtCI,EAASC,cACZC,OAAM,GACNC,OAAOV,EAAI,CAACW,YAAevB,EAAM,IAAKuB,YAAevB,EAAMY,EAAI,KAAO,IACtEY,MAAM,CAACR,EAAaC,IAGjBQ,EAAYX,EAAQ,IAAM,EAAI,EAE9BY,EAAQ,SAACC,GAAD,OACZA,EAAEC,KAAK,QAAS,UAAUC,KACxBC,YAAWX,GACRY,MAAMN,GACNO,YAAW,SAACC,GAAD,OAAUC,YAAWD,EAAM,eAGvCE,EAAS,SAACR,EAAGS,GACjBT,EAAEC,KAAK,QAAS,WACbC,KAAKC,YAAWX,GAAQkB,WAAW,IAAIC,SAAS,IAChDC,OAAO,WACPC,MAAM,YAHT,qBAGoCJ,EAAO,GAH3C,QAKIA,EAAO,KAAOlB,EAAaS,EAAEY,OAAO,WAAWX,KAAK,UAAW,IAC9DD,EAAEY,OAAO,WAAWX,KAAK,UAAW,IAGrCa,EAAQ,SAACd,EAAGS,GAAJ,OACZT,EACGC,KAAK,QAAS,UACdC,KAAKa,YAAUN,GAAQL,MAAM,EAAG,OAAOY,YAAY,KAElDC,EAAkBC,YAAI7C,GAAO,SAACiC,GAAD,OACjCa,YAAa/C,EAAWkC,GAAOhC,EAAW,aAGtC8C,EAAkBC,YAAIhD,GAAO,SAACiC,GAAD,OACjCgB,KAAKD,IACHF,YAAa/C,EAAWkC,GAAOhC,EAAW,aAC1C6C,YAAa/C,EAAWkC,GAAOhC,EAAW,aAC1C6C,YAAa/C,EAAWkC,GAAOhC,EAAW,gBAIxCiD,EAAsBC,cACzB9B,OAAM,GACNC,OAAO,CAACsB,EAAiBK,KAAKD,IAAI,EA/ClB,IA+CkCD,KAClDK,KAAK,GACL5B,MAAM,CAACN,EAAaF,IAEjBqC,EAAmBC,cACtBjC,OAAM,GACNC,OAAO,CACN2B,KAAKD,IAAI,EAAGJ,GACZK,KAAKD,IAAI,GAvDM,IAuDWD,KAE3BK,KAAK,GACL5B,MAAM,CAACN,EAAaF,IAmDvB,SAASuC,IACP,IAAMC,EAAKC,YAAMC,MAAM,GACjBzB,EAAOd,EAAOwC,OAAOH,GAC3B,IAAKI,MAAM3B,GAAO,CAChB,IACMxC,GAAQoE,EADKC,aAAS,SAAC7B,GAAD,OAAUV,YAAeU,MAAO8B,MACnC/D,EAAOiC,EAAM,GAChC+B,EAAWhE,EAAMP,EAAQ,GACzBwE,EAAYjE,EAAMP,GACxBiB,EACEuB,EAAOV,YAAeyC,GAAYzC,YAAe0C,GAAahC,EAC1D+B,EACAC,IAKV,SAASC,IACPxD,EAAmBV,EAAMY,EAAI,IAI/BN,EAAKpB,QAAQK,SAAQ,SAACX,EAAKuF,GACzB,IAAMC,EAAM7B,YAAO3D,GACbwB,EAAIgE,EAAIC,aAAaC,SAASC,KAE9BC,EAAYC,IAAsBN,GAClC/B,EA3Ee,SAACoC,GACtB,OAAItE,GAA2B,UAAdD,GAAyBE,GAAuB,WAAdqE,EAC1CnB,EAELnD,GAA2B,WAAdsE,EAA+BtB,EAE9B,UAAdjD,GAAyBE,EACpBmD,cACJjC,OAAM,GACNC,OAAO,CACN2B,KAAKD,IACH,EACAH,YAAI7C,GAAO,SAACiC,GAAD,OACTa,YAAa/C,EAAWkC,GAAOhC,EAAWuE,OAG9CvB,KAAKD,IACH,GA7ES,IA+EPA,YAAIhD,GAAO,SAACiC,GAAD,OACTa,YAAa/C,EAAWkC,GAAOhC,EAAWuE,SAIjDpB,KAAK,GACL5B,MAAM,CAACN,EAAaF,IAElBmC,cACJ9B,OAAM,GACNC,OAAO,CAxFU,IA0Fd2B,KAAKJ,IACH,EACAA,YAAI7C,GAAO,SAACiC,GAAD,OACTa,YAAa/C,EAAWkC,GAAOhC,EAAWuE,OAGhDvB,KAAKD,IACH,EAlGW,IAoGTA,YAAIhD,GAAO,SAACiC,GAAD,OACTa,YAAa/C,EAAWkC,GAAOhC,EAAWuE,SAIjDpB,KAAK,GACL5B,MAAM,CAACN,EAAaF,IA6BR0D,CAAeF,GACxBG,EAAQC,IAAOJ,GAqCrB,GAlCAJ,EACG7B,OAAO,WACPC,MAAM,YAFT,qBAEoCtB,EAFpC,QAGGmD,WAAWjE,GACXyB,KAAKH,GAER0C,EAAI7B,OAAO,YAAY8B,WAAWjE,GAAGyB,KAAKM,EAAQC,GAGlDgC,EACG7B,OAAO,WACPC,MAAM,YAFT,qBAEoCvB,EAFpC,QAGGoD,WAAWjE,GACXyB,KAAKY,EAAOL,GAGfgC,EACGS,UAAU,UACVC,KAAK9E,GAAO,SAACiC,GAAD,OAAUA,KACtB8C,MAAK,SAACC,GAAD,OACJA,EACGC,OAAO,UACPrD,KAAK,OAAQ+C,GACb/C,KAAK,SAAU+C,GACf/C,KAAK,IAAK,GACVA,KAAK,KAAMV,GACXU,KAAK,MAAM,SAACK,GAAD,OAAUd,EAAOI,YAAeU,UAE/CoC,WAAWjE,GACXwB,KAAK,MAAM,SAACK,GAAD,OAAUd,EAAOI,YAAeU,OAC3CL,KAAK,MAAM,SAACK,GAAD,OACVG,EAAOU,YAAa/C,EAAWkC,GAAOhC,EAAWuE,OAGnC,UAAdvE,EAAuB,CACzBmE,EACGS,UAAU,SACVR,WAAWjE,GACXwB,KAAK,KAAMQ,EAAO,IAClBR,KAAK,KAAMQ,EAAO,IAClB8C,SAEH,IAOIC,EAPEC,EAAWC,cACdC,MAAMC,KACNC,GAAE,SAACvD,GAAD,OAAUd,EAAOI,YAAeU,OAClCwD,GAAE,SAACxD,GAAD,OACDG,EAAOU,YAAa/C,EAAWkC,GAAOhC,EAAWuE,OAKrDJ,EACGS,UAAU,UACVC,KAAKlE,EAAI,CAACZ,GAAS,IACnB+E,MACC,SAACC,GAAD,OACEA,EACGC,OAAO,QACPrD,KAAK,QAAS,SACdA,KAAK,OAAQ,QACbA,KAAK,SAAU+C,EAAQ,MACvB/C,KAAK,eAAgB,GACrBA,KAAK,IAAKwD,GACVxD,KAAK,oBAAoB,WACxB,OAAQuD,EAAazB,KAAKgC,oBAE3B7D,MAAK,SAACmD,GAAD,OACJA,EACGpD,KAAK,oBAAqBuD,GAC1Bd,WAAWjE,GACXwB,KAAK,oBAAqB,SAEnC,SAAC+D,GAAD,OACEA,EACG/D,KAAK,mBAAoB,MACzByC,WAAWjE,GACXwF,UAAU,KAAK,SAAU3D,GACxB,IAAM4D,EAAWtD,YAAOmB,MAAM9B,KAAK,KAC7B1C,EAAUkG,EAASnD,GACzB,OAAO6D,0BAAgBD,EAAU3G,SAI3CkF,EACGS,UAAU,UACVC,KAAKlE,EAAI,CAACZ,GAAS,IACnB+E,MACC,SAACC,GAAD,OACEA,EACGC,OAAO,QACPrD,KAAK,QAAS,SACdA,KAAK,OAAQ,QACbA,KAAK,SAAU+C,EAAQ,MACvB/C,KAAK,eAAgB,GACrBA,KAAK,IAAKwD,GACVxD,KAAK,oBAAoB,WACxB,OAAQuD,EAAazB,KAAKgC,oBAE3B7D,MAAK,SAACmD,GAAD,OACJA,EACGpD,KAAK,oBAAqBuD,GAC1Bd,WAAWjE,GACXwB,KAAK,oBAAqB,SAEnC,SAAC+D,GAAD,OACEA,EACG/D,KAAK,mBAAoB,MACzByC,WAAWjE,GACXwF,UAAU,KAAK,SAAU3D,GACxB,IAAM4D,EAAWtD,YAAOmB,MAAM9B,KAAK,KAC7B1C,EAAUkG,EAASnD,GACzB,OAAO6D,0BAAgBD,EAAU3G,cAK3CkF,EAAIS,UAAU,UAAUK,SAExBd,EACGS,UAAU,SACVC,KAAK9E,GAAO,SAACiC,GAAD,OAAUA,KACtB8C,MAAK,SAACC,GAAD,OACJA,EACGC,OAAO,QACPrD,KAAK,QAAS,QACdA,KAAK,MAAM,SAACK,GAAD,OAAUd,EAAOI,YAAeU,OAC3CL,KAAK,KAAMV,GACXU,KAAK,MAAM,SAACK,GAAD,OAAUd,EAAOI,YAAeU,OAC3CL,KAAK,KAAMV,MAEfmD,WAAWjE,GACXwB,KAAK,MAAM,SAACK,GAAD,OAAUd,EAAOI,YAAeU,OAC3CL,KAAK,KAAMQ,EAAO,IAClBR,KAAK,MAAM,SAACK,GAAD,OAAUd,EAAOI,YAAeU,OAC3CL,KAAK,MAAM,SAACK,GAAD,OACVG,EAAOU,YAAa/C,EAAWkC,GAAOhC,EAAWuE,OAIvDJ,EAAIS,UAAU,KAAKjD,KAAK,iBAAkB,QAC1CwC,EACG2B,GAAG,YAAaxC,GAChBwC,GAAG,YAAaxC,GAChBwC,GAAG,WAAY7B,GACf6B,GAAG,WAAY7B,QAEnB,CAACjE,EAAWnB,EAAYoB,EAAWC,EAAOJ,EAAYC,IAEzDhB,qBAAU,WACRsB,EAAKpB,QAAQK,SAAQ,SAACX,GACR2D,YAAO3D,GAEhBiG,UAAU,UACVjD,KAAK,KAAK,SAACK,GAAD,OAAWA,IAASxB,EAAkB,EAAI,UAExD,CAACA,IAEJ,IAAMuF,EAAoBC,uBACxB,SAACzB,GACC,GAAK/D,EAAL,CACA,IAAMyF,EAAapD,YAAY,OAC7B/C,QAD6B,IAC7BA,OAD6B,EAC7BA,EAAaU,GACb,QACA+D,GAEF,GAAkB,UAAdvE,EAAuB,OAAOiG,EAElC,IAAMC,EAAYC,YAAUC,YAAQ9E,YAAed,GAAkB,GAAI,CACvE6F,eAAgB,SAOlB,OAAOJ,EALgBpD,YAAY,OACjC/C,QADiC,IACjCA,OADiC,EACjCA,EAAaoG,GACb,QACA3B,MAIJ,CAACzE,EAAYU,EAAiBR,IAG1BsG,EAAQC,mBAAQ,WACpB,IAAMC,EAAS,GAQf,MANA,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAI,SAACC,EAASlH,GAI5B,OAHAgH,EAAOG,KAAK,CACVC,eAAe,GAAD,OAAa,IAARpH,EAAL,QAET,QAEFgH,IACN,IAEH,OACE,kBAAC,IAAMK,SAAP,KACE,yBAAKC,UAAU,cACZtC,IAAsBiC,KAAI,SAAClC,EAAW/E,GACrC,IAAMuH,EAAQhB,EAAkBxB,EAAW/E,GAC3C,OACE,yBACEwH,IAAKzC,EACLuC,UAAWG,IAAW,sBAAD,aAA8B1C,IACnD5F,IAAK4B,EACLgC,MAAO+D,EAAM9G,IAEZgB,GACC,yBAAKsG,UAAWG,IAAW,QAAD,aAAgB1C,KACxC,wBAAIuC,UAAU,SAAS3G,EAAE+G,YAAW3C,KACpC,wBAAIuC,UAAU,SACX7E,YAAWzB,EAAiB,YAE/B,yBAAKsG,UAAU,gBACb,4BACGK,YACCtE,YAAY,OACV/C,QADU,IACVA,OADU,EACVA,EAAaU,GACbR,EACAuE,KAIN,sCAAQwC,GAAS,EAAI,IAAM,IAA3B,OAAgCI,YAAaJ,OAInD,yBACEpI,IAAK,SAAC+H,GACJrG,EAAKpB,QAAQO,GAASkH,GAExBU,oBAAoB,iBAEpB,uBAAGN,UAAU,WACb,uBAAGA,UAAU,YACb,uBAAGA,UAAU,qBAUb,SAACO,EAAWC,GAC1B,QAAKC,IAAMD,EAAUtH,UAAWqH,EAAUrH,eAE9BuH,IAAMD,EAAUrH,UAAWoH,EAAUpH,eAErCsH,IAAMD,EAAUpH,MAAOmH,EAAUnH,WAG1CqH,IACCD,EAAUE,kBAAkBC,UAC5BJ,EAAUG,kBAAkBC,eAK7BF,IACCD,EAAUE,kBAAkBE,aAC5BL,EAAUG,kBAAkBE,iBAIpBH,IAAMD,EAAUvH,MAAOsH,EAAUtH","file":"static/js/29.163e6e85.chunk.js","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  TIMESERIES_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useResizeObserver';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  getStatistic,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {min, max, bisector} from 'd3-array';\nimport {axisBottom, axisRight} from 'd3-axis';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear, scaleLog} from 'd3-scale';\nimport {select, mouse} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useCallback, useEffect, useRef, useMemo, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction Timeseries({timeseries, dates, chartType, isUniform, isLog}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const [highlightedDate, setHighlightedDate] = useState();\n\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  useEffect(() => {\n    const T = dates.length;\n\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // Margins\n    const margin = {top: 15, right: 35, bottom: 25, left: 25};\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : [])\n      .range([margin.left, chartRight]);\n\n    // Number of x-axis ticks\n    const numTicksX = width < 480 ? 4 : 7;\n\n    const xAxis = (g) =>\n      g.attr('class', 'x-axis').call(\n        axisBottom(xScale)\n          .ticks(numTicksX)\n          .tickFormat((date) => formatDate(date, 'dd MMM'))\n      );\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale) =>\n      g\n        .attr('class', 'y-axis')\n        .call(axisRight(yScale).ticks(4, '0~s').tickPadding(4));\n\n    const uniformScaleMin = min(dates, (date) =>\n      getStatistic(timeseries[date], chartType, 'active')\n    );\n\n    const uniformScaleMax = max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], chartType, 'confirmed'),\n        getStatistic(timeseries[date], chartType, 'recovered'),\n        getStatistic(timeseries[date], chartType, 'deceased')\n      )\n    );\n\n    const yScaleUniformLinear = scaleLinear()\n      .clamp(true)\n      .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const yScaleUniformLog = scaleLog()\n      .clamp(true)\n      .domain([\n        Math.max(1, uniformScaleMin),\n        Math.max(10, yBufferTop * uniformScaleMax),\n      ])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const generateYScale = (statistic) => {\n      if (isUniform && chartType === 'total' && isLog && statistic !== 'tested')\n        return yScaleUniformLog;\n\n      if (isUniform && statistic !== 'tested') return yScaleUniformLinear;\n\n      if (chartType === 'total' && isLog)\n        return scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(\n              1,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n            Math.max(\n              10,\n              yBufferTop *\n                max(dates, (date) =>\n                  getStatistic(timeseries[date], chartType, statistic)\n                )\n            ),\n          ])\n          .nice(4)\n          .range([chartBottom, margin.top]);\n\n      return scaleLinear()\n        .clamp(true)\n        .domain([\n          yBufferBottom *\n            Math.min(\n              0,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n          Math.max(\n            1,\n            yBufferTop *\n              max(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n          ),\n        ])\n        .nice(4)\n        .range([chartBottom, margin.top]);\n    };\n\n    function mousemove() {\n      const xm = mouse(this)[0];\n      const date = xScale.invert(xm);\n      if (!isNaN(date)) {\n        const bisectDate = bisector((date) => parseIndiaDate(date)).left;\n        const index = bisectDate(dates, date, 1);\n        const dateLeft = dates[index - 1];\n        const dateRight = dates[index];\n        setHighlightedDate(\n          date - parseIndiaDate(dateLeft) < parseIndiaDate(dateRight) - date\n            ? dateLeft\n            : dateRight\n        );\n      }\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    refs.current.forEach((ref, i) => {\n      const svg = select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const statistic = TIMESERIES_STATISTICS[i];\n      const yScale = generateYScale(statistic);\n      const color = COLORS[statistic];\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale);\n\n      /* Path dots */\n      svg\n        .selectAll('circle')\n        .data(dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('r', 2)\n            .attr('cy', chartBottom)\n            .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        )\n        .transition(t)\n        .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        .attr('cy', (date) =>\n          yScale(getStatistic(timeseries[date], chartType, statistic))\n        );\n\n      if (chartType === 'total') {\n        svg\n          .selectAll('.stem')\n          .transition(t)\n          .attr('y1', yScale(0))\n          .attr('y2', yScale(0))\n          .remove();\n\n        const linePath = line()\n          .curve(curveMonotoneX)\n          .x((date) => xScale(parseIndiaDate(date)))\n          .y((date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n\n        let pathLength;\n\n        svg\n          .selectAll('.trend')\n          .data(T ? [dates] : [])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke', color + '50')\n                .attr('stroke-width', 4)\n                .attr('d', linePath)\n                .attr('stroke-dasharray', function () {\n                  return (pathLength = this.getTotalLength());\n                })\n                .call((enter) =>\n                  enter\n                    .attr('stroke-dashoffset', pathLength)\n                    .transition(t)\n                    .attr('stroke-dashoffset', 0)\n                ),\n            (update) =>\n              update\n                .attr('stroke-dasharray', null)\n                .transition(t)\n                .attrTween('d', function (date) {\n                  const previous = select(this).attr('d');\n                  const current = linePath(date);\n                  return interpolatePath(previous, current);\n                })\n          );\n\n        svg\n          .selectAll('.trend')\n          .data(T ? [dates] : [])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke', color + '50')\n                .attr('stroke-width', 4)\n                .attr('d', linePath)\n                .attr('stroke-dasharray', function () {\n                  return (pathLength = this.getTotalLength());\n                })\n                .call((enter) =>\n                  enter\n                    .attr('stroke-dashoffset', pathLength)\n                    .transition(t)\n                    .attr('stroke-dashoffset', 0)\n                ),\n            (update) =>\n              update\n                .attr('stroke-dasharray', null)\n                .transition(t)\n                .attrTween('d', function (date) {\n                  const previous = select(this).attr('d');\n                  const current = linePath(date);\n                  return interpolatePath(previous, current);\n                })\n          );\n      } else {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n\n        svg\n          .selectAll('.stem')\n          .data(dates, (date) => date)\n          .join((enter) =>\n            enter\n              .append('line')\n              .attr('class', 'stem')\n              .attr('x1', (date) => xScale(parseIndiaDate(date)))\n              .attr('y1', chartBottom)\n              .attr('x2', (date) => xScale(parseIndiaDate(date)))\n              .attr('y2', chartBottom)\n          )\n          .transition(t)\n          .attr('x1', (date) => xScale(parseIndiaDate(date)))\n          .attr('y1', yScale(0))\n          .attr('x2', (date) => xScale(parseIndiaDate(date)))\n          .attr('y2', (date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', mousemove)\n        .on('mouseout', mouseout)\n        .on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, isUniform, isLog, timeseries, dates]);\n\n  useEffect(() => {\n    refs.current.forEach((ref) => {\n      const svg = select(ref);\n      svg\n        .selectAll('circle')\n        .attr('r', (date) => (date === highlightedDate ? 4 : 2));\n    });\n  }, [highlightedDate]);\n\n  const getStatisticDelta = useCallback(\n    (statistic) => {\n      if (!highlightedDate) return;\n      const deltaToday = getStatistic(\n        timeseries?.[highlightedDate],\n        'delta',\n        statistic\n      );\n      if (chartType === 'total') return deltaToday;\n\n      const yesterday = formatISO(subDays(parseIndiaDate(highlightedDate), 1), {\n        representation: 'date',\n      });\n      const deltaYesterday = getStatistic(\n        timeseries?.[yesterday],\n        'delta',\n        statistic\n      );\n      return deltaToday - deltaYesterday;\n    },\n    [timeseries, highlightedDate, chartType]\n  );\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"Timeseries\">\n        {TIMESERIES_STATISTICS.map((statistic, index) => {\n          const delta = getStatisticDelta(statistic, index);\n          return (\n            <div\n              key={statistic}\n              className={classnames('svg-parent fadeInUp', `is-${statistic}`)}\n              ref={wrapperRef}\n              style={trail[index]}\n            >\n              {highlightedDate && (\n                <div className={classnames('stats', `is-${statistic}`)}>\n                  <h5 className=\"title\">{t(capitalize(statistic))}</h5>\n                  <h5 className=\"title\">\n                    {formatDate(highlightedDate, 'dd MMMM')}\n                  </h5>\n                  <div className=\"stats-bottom\">\n                    <h2>\n                      {formatNumber(\n                        getStatistic(\n                          timeseries?.[highlightedDate],\n                          chartType,\n                          statistic\n                        )\n                      )}\n                    </h2>\n                    <h6>{`${delta >= 0 ? '+' : ''}${formatNumber(delta)}`}</h6>\n                  </div>\n                </div>\n              )}\n              <svg\n                ref={(element) => {\n                  refs.current[index] = element;\n                }}\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                <g className=\"x-axis\" />\n                <g className=\"x-axis2\" />\n                <g className=\"y-axis\" />\n              </svg>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  } else if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  } else if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Timeseries, isEqual);\n"],"sourceRoot":""}